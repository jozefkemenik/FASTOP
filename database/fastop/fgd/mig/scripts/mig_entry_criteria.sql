DECLARE
    CURSOR c_data IS
    SELECT RULE_CRITERIA_SID AS ENTRY_CRITERIA_SID, RULE_SID AS OLD_ENTRY_SID, CRITERION_SID, SCORE_VERSION_SID, SCORE, LDAP_LOGIN, DATETIME, ORGANISATION, ROUND_SID, 'FGD_NFR_RULES' AS OLD_TABLE FROM fgd_nfr_rule_criteria
    UNION ALL
    SELECT INST_CRITERIA_SID AS ENTRY_CRITERIA_SID, INSTITUTION_SID AS OLD_ENTRY_SID, CRITERION_SID, SCORE_VERSION_SID, SCORE, LDAP_LOGIN, DATETIME, ORGANISATION, ROUND_SID, 'FGD_IFI_INSTITUTIONS' AS OLD_TABLE FROM fgd_IFI_INST_criteria
    UNION ALL
    SELECT FRAME_CRITERIA_SID AS ENTRY_CRITERIA_SID, FRAME_SID AS OLD_ENTRY_SID, CRITERION_SID, SCORE_VERSION_SID, SCORE, LDAP_LOGIN, DATETIME, ORGANISATION, ROUND_SID, 'FGD_MTBF_FRAMES' AS OLD_TABLE FROM fgd_MTBF_FRAME_criteria;

l_entry_criteria_sid NUMBER;
l_new_sid NUMBER;
l_key NUMBER;
BEGIN
    
    FOR rec IN c_data LOOP
        l_key := rec.OLD_ENTRY_SID;
        l_new_sid := NVL(get_new_entry_sid(rec.OLD_ENTRY_SID, rec.OLD_TABLE), 0);
        IF l_new_sid = 0 THEN
            LOG_FAIL('ENTRY_CRITERIA', sysdate, sqlerrm() || 'ENTRY_SID = '||rec.OLD_ENTRY_SID, 1);
        ELSE
            BEGIN
                INSERT INTO ENTRY_CRITERIA(ENTRY_SID, CRITERION_SID, SCORE_VERSION_SID, SCORE, LDAP_LOGIN, DATETIME, ORGANISATION, ROUND_SID)
                VALUES (l_new_sid, rec.CRITERION_SID, rec.SCORE_VERSION_SID, rec.SCORE, rec.LDAP_LOGIN, rec.DATETIME, rec.ORGANISATION, rec.ROUND_SID)
                RETURNING ENTRY_CRITERIA_SID INTO l_entry_criteria_sid;
            EXCEPTION
                WHEN OTHERS THEN
                    LOG_FAIL('ENTRY_CRITERIA', sysdate, sqlerrm() || 'ENTRY_SID = '||rec.OLD_ENTRY_SID, 2);
            END;
            BEGIN
                INSERT INTO ENTRY_CRITERIA_MIG(OLD_ENTRY_SID, OLD_TABLE, NEW_ENTRY_SID)
                VALUES (rec.ENTRY_CRITERIA_SID, rec.OLD_TABLE, l_entry_criteria_sid);
            EXCEPTION
                WHEN OTHERS THEN
                    LOG_FAIL('ENTRY_CRITERIA', sysdate, sqlerrm() || 'ENTRY_SID = '||rec.OLD_ENTRY_SID, 3);
            END;
        END IF;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        LOG_FAIL('ENTRY_CRITERIA', sysdate, sqlerrm()|| 'ENTRY_SID = '||l_key, 0);
END;
/
DECLARE
    CURSOR c_data IS
        with t as (SELECT RULE_CRITERIA_SID AS ENTRY_CRITERIA_SID, LDAP_LOGIN, DATETIME, ORGANISATION, 'FGD_NFR_RULES' AS OLD_TAB FROM fgd_nfr_rule_ACCEPTED_criteria
        UNION
        SELECT FRAME_CRITERIA_SID AS ENTRY_CRITERIA_SID, LDAP_LOGIN, DATETIME, ORGANISATION, 'FGD_MTBF_FRAMES' AS OLD_TAB FROM fgd_mtbf_frame_acc_criteria
        UNION
        SELECT INST_CRITERIA_SID AS ENTRY_CRITERIA_SID, LDAP_LOGIN, DATETIME, ORGANISATION, 'FGD_IFI_INSTITUTIONS' AS OLD_TAB FROM fgd_ifi_inst_accepted_criteria)
        select cm.new_entry_sid, t.ldap_login, t.datetime, t.organisation
          from t,
               ENTRY_CRITERIA_MIG cm
         where t.old_tab = cm.old_table
           and cm.old_entry_sid = t.entry_criteria_sid;

BEGIN
    FOR rec IN c_data LOOP
        INSERT INTO ENTRY_ACCEPTED_CRITERIA(ENTRY_CRITERIA_SID, LDAP_LOGIN, DATETIME, ORGANISATION)
        VALUES (rec.NEW_ENTRY_SID, rec.LDAP_LOGIN, rec.DATETIME, rec.ORGANISATION);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        LOG_FAIL('ENTRY_ACCEPTED_CRITERIA', sysdate, sqlerrm(), 0);
END;
/
DECLARE
    CURSOR c_data IS
        WITH t AS (
            SELECT COMMENT_SID, RULE_CRITERIA_SID AS OLD_ENTRY_CRITERIA_SID, DESCR, LDAP_LOGIN, ORGANISATION, DATETIME, 'FGD_NFR_RULES' AS OLD_TAB FROM FGD_NFR_RULE_CRITERIA_COMMENTS
            UNION
            SELECT COMMENT_SID, INST_CRITERIA_SID AS OLD_ENTRY_CRITERIA_SID, DESCR, LDAP_LOGIN, ORGANISATION, DATETIME, 'FGD_IFI_INSTITUTIONS' AS OLD_TAB FROM FGD_IFI_INST_CRITERIA_COMMENTS
            UNION
            SELECT COMMENT_SID, INST_CRITERIA_SID AS OLD_ENTRY_CRITERIA_SID, DESCR, LDAP_LOGIN, ORGANISATION, DATETIME, 'FGD_MTBF_FRAMES' AS OLD_TAB FROM FGD_MTBF_FRAME_CRT_CMMNTS
        )
            SELECT CM.NEW_ENTRY_SID, t.COMMENT_SID, t.DESCR, t.LDAP_LOGIN, t.ORGANISATION, t.DATETIME, t.OLD_TAB
              FROM t,
                   ENTRY_CRITERIA_MIG CM
             WHERE CM.OLD_TABLE = t.OLD_TAB
               AND t.OLD_ENTRY_CRITERIA_SID = CM.OLD_ENTRY_SID;
l_new_comment_sid NUMBER;
BEGIN
    FOR rec IN c_data LOOP
        INSERT INTO ENTRY_CRITERIA_COMMENTS(ENTRY_CRITERIA_SID, DESCR, LDAP_LOGIN, ORGANISATION, DATETIME)
        VALUES (rec.NEW_ENTRY_SID, rec.DESCR, rec.LDAP_LOGIN, rec.ORGANISATION, rec.DATETIME)
        RETURNING COMMENT_SID INTO l_new_comment_sid;
        
        INSERT INTO ENTRY_CRITERIA_COMM_MIG(NEW_COMMENT_SID, OLD_COMMENT_SID, OLD_TABLE)
        VALUES (l_new_comment_sid, rec.COMMENT_SID, rec.OLD_TAB);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        LOG_FAIL('ENTRY_CRITERIA', sysdate, sqlerrm(), 0);
END;      
/