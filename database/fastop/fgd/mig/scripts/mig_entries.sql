DECLARE

    CURSOR c_ENTRIES IS
        SELECT abolition_reason, RULE_SID AS ENTRY_SID, RULE_NO AS ENTRY_NO, RULE_VERSION AS ENTRY_VERSION, APPRV_DATE, IMPL_DATE, REFORM_IMPL_DATE, REFORM_REPLACED_DATE, ABOLITION_DATE, reform_adopt_date, COUNTRY_ID, DESCR, 'NFR' AS APP_ID, 'FGD_NFR_RULES' AS TAB FROM FGD_NFR_RULES
        UNION 
        SELECT abol_reason as ABOLITION_REASON, INSTITUTION_SID AS ENTRY_SID, TO_NUMBER(SUBSTR(INSTITUTION_ID, 5)) AS ENTRY_NO, INSTITUTION_VERSION AS ENTRY_VERSION, NULL AS APPRV_DATE, estab_date AS IMPL_DATE, l_ref_date AS REFORM_IMPL_DATE, reform_replaced_date AS REFORM_REPLACED_DATE, abol_date AS ABOLITION_DATE, L_REF_ADOPT_DATE AS reform_adopt_date, COUNTRY_ID, DESCR, 'IFI' AS APP_ID, 'FGD_IFI_INSTITUTIONS' AS TAB FROM FGD_IFI_INSTITUTIONS
        UNION 
        SELECT abol_reason as ABOLITION_REASON, FRAME_SID AS ENTRY_SID, FRAME_NO AS ENTRY_NO, FRAME_VERSION AS ENTRY_VERSION,MTBF_ADOP_DATE AS APPRV_DATE, entry_date AS IMPL_DATE, l_ref_entry AS REFORM_IMPL_DATE, L_REF_REPL_DATE AS REFORM_REPLACED_DATE, abol_date AS ABOLITION_DATE, NULL AS reform_adopt_date,  COUNTRY_ID, MTBF_DESCR AS DESCR, 'MTBF' AS APP_ID, 'FGD_MTBF_FRAMES' AS TAB FROM FGD_MTBF_FRAMES
        UNION 
        SELECT abol_reason as ABOLITION_REASON, ENTRY_SID, ENTRY_NO, ENTRY_VERSION,NULL AS APPRV_DATE, entry_date AS IMPL_DATE, l_ref_entry AS REFORM_IMPL_DATE, L_REF_REPL_DATE AS REFORM_REPLACED_DATE, abol_date AS ABOLITION_DATE, NULL AS reform_adopt_date, COUNTRY_ID, GBD_DESCR AS DESCR, 'GBD' AS APP_ID, 'FGD_GBD_ENTRIES' AS TAB FROM FGD_GBD_ENTRIES
        ORDER BY 10 DESC, 8
        ;
     
    
l_key NUMBER;
BEGIN
    FOR r_rec IN c_ENTRIES LOOP
        BEGIN
            INSERT INTO ENTRIES(ENTRY_NO, ENTRY_VERSION, COUNTRY_ID, APP_ID, APPRV_DATE, IMPL_DATE, REFORM_IMPL_DATE, REFORM_REPLACED_DATE, ABOLITION_DATE, REFORM_ADOPT_DATE, ABOLITION_REASON)
            VALUES (r_rec.ENTRY_NO, r_rec.ENTRY_VERSION, r_rec.COUNTRY_ID, r_rec.APP_ID, r_rec.APPRV_DATE, r_rec.IMPL_DATE, r_rec.REFORM_IMPL_DATE, r_rec.REFORM_REPLACED_DATE, r_rec.ABOLITION_DATE, r_rec.REFORM_ADOPT_DATE, r_rec.ABOLITION_REASON)
            RETURNING ENTRY_SID INTO l_key;
            
        EXCEPTION
            WHEN OTHERS THEN
                LOG_FAIL('ENTRIES', sysdate, sqlerrm(), r_rec.ENTRY_SID);
        END;
            INSERT INTO ENTRIES_MIG(OLD_SID, NEW_SID, OLD_TABLE)
            VALUES (r_rec.ENTRY_SID, l_key, r_rec.TAB);
    END LOOP;
    
    
    
 EXCEPTION 
    WHEN OTHERS THEN
        LOG_FAIL('MIG ENTRIES FAIL', sysdate, sqlerrm(), 0);
END;
    