DECLARE

CURSOR c_nfr_targets IS
     SELECT t.*, e.NEW_SID 
		FROM ENTRIES_MIG e, FGD_NFR_TARGET_RULES t
      WHERE t.RULE_SID = e.OLD_SID;
CURSOR c_mtbf_targets IS
     SELECT t.*, e.NEW_SID 
		FROM ENTRIES_MIG e, FGD_MTBF_TARGET_FRAMES t
      WHERE t.FRAME_SID = e.OLD_SID;	

l_nfr_question NUMBER;
l_mtbf_question NUMBER;
-- l_sectors_question NUMBER;
BEGIN
	SELECT NEW_QUESTION_VERSION_SID
      INTO l_nfr_question
      FROM QUESTION_VERSIONS_MIG
     WHERE OLD_ATTR_SID IN (SELECT ATTR_SID FROM FGD_CFG_ATTRIBUTES WHERE ATTR_TABLE = 'FGD_NFR_TARGET_RULES');
	FOR r_rec IN c_nfr_targets LOOP
		BEGIN
			INSERT INTO TARGET_ENTRIES(ENTRY_SID, RESPONSE_SID, VALUE, NOT_APPLICABLE, QUESTION_VERSION_SID)
			VALUES (r_rec.NEW_SID, r_rec.YEAR, r_rec.VALUE, r_rec.NOT_APPLICABLE, l_nfr_question);
		EXCEPTION
			WHEN OTHERS THEN
				LOG_FAIL('MIG TARGET_ENTRIES FAIL', sysdate, sqlerrm(), r_rec.NEW_SID);
		END;
	END LOOP;
	
	SELECT NEW_QUESTION_VERSION_SID
      INTO l_mtbf_question
      FROM QUESTION_VERSIONS_MIG
     WHERE OLD_ATTR_SID IN (SELECT ATTR_SID FROM FGD_CFG_ATTRIBUTES WHERE ATTR_NAME = 'MTBF_NUM_TARGET_SID');
	FOR r_rec IN c_mtbf_targets LOOP
		BEGIN
			INSERT INTO TARGET_ENTRIES(ENTRY_SID, RESPONSE_SID, VALUE, NOT_APPLICABLE, QUESTION_VERSION_SID)
			VALUES (r_rec.NEW_SID, r_rec.MTBF_NUM_TARGET_SID, r_rec.VALUE, r_rec.NOT_APPLICABLE, l_mtbf_question);
		EXCEPTION
			WHEN OTHERS THEN
				LOG_FAIL('MIG TARGET_ENTRIES FAIL', sysdate, sqlerrm(), r_rec.NEW_SID);
		END;
	END LOOP;
EXCEPTION	
	WHEN OTHERS THEN
		LOG_FAIL('MIG TARGET_ENTRIES FAIL', sysdate, sqlerrm(), 0);
END;
/

DECLARE
    l_new_question_version_sid NUMBER;

BEGIN
    SELECT NEW_QUESTION_VERSION_SID
      INTO l_new_question_version_sid
      FROM QUESTION_VERSIONS_MIG
     WHERE OLD_ATTR_SID IN (SELECT ATTR_SID FROM FGD_CFG_ATTRIBUTES WHERE ATTR_TABLE = 'FGD_NFR_TARGET_RULES');
     
     INSERT INTO TARGET_ENTRIES_CFG(APP_ID, DEPENDENT_QUESTION, YEARS_PREV_COUNT, YEAR_CURR_ROUND, YEARS_FORW_COUNT)
     VALUES ('NFR', l_new_question_version_sid, 1, 1, 3);
     
    SELECT NEW_QUESTION_VERSION_SID
      INTO l_new_question_version_sid
      FROM QUESTION_VERSIONS_MIG
     WHERE OLD_ATTR_SID IN (SELECT ATTR_SID FROM FGD_CFG_ATTRIBUTES WHERE ATTR_NAME = 'MF_AGG_BUDG_PROC_SID');
     
     INSERT INTO TARGET_ENTRIES_CFG(APP_ID, DEPENDENT_QUESTION,  YEARS_PREV_COUNT,YEAR_CURR_ROUND, YEARS_FORW_COUNT)
     VALUES ('MTBF', l_new_question_version_sid, 0, 0, 4);
END;
/

DECLARE
    CURSOR c_data IS
        SELECT E.NEW_SID, LM.NEW_LOV_SID AS RESPONSE_SID, S.EST_SHARE_VALUE AS VALUE, S.DESCR
          FROM ENTRIES_MIG E,
               FGD_NFR_RULE_SECTORS S,
			   LOVS_MIG LM
         WHERE E.OLD_SID = S.RULE_SID
           AND S.SECTOR_SID = LM.OLD_LOV_SID;

    l_question_version_sid NUMBER;
    l_master_sid NUMBER;
BEGIN
    SELECT QUESTION_VERSION_SID, MASTER_SID
      INTO l_question_version_sid, l_master_sid
      FROM CFG_QUESTION_VERSIONS
     WHERE MASTER_SID IS NOT NULL; 
    FOR rec IN c_data LOOP
        INSERT INTO TARGET_ENTRIES(ENTRY_SID, QUESTION_VERSION_SID, RESPONSE_SID, VALUE, DESCR)
        VALUES (rec.NEW_SID, l_question_version_sid, rec.RESPONSE_SID, rec.VALUE, rec.DESCR);
        INSERT INTO ENTRY_CHOICES(ENTRY_SID, QUESTION_VERSION_SID, RESPONSE, ASSESSMENT_PERIOD)
        VALUES (rec.NEW_SID, l_master_sid, rec.RESPONSE_SID, 0);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        LOG_FAIL('MIG FGD_NFR_RULE_SECTORS FAIL', sysdate, sqlerrm(), 0);
END;
/
