DROP TABLE MIG_LOG_FAIL;
DROP TABLE MIG_LOG_INFO;

CREATE TABLE MIG_LOG_FAIL (
TABLE_NAME VARCHAR2(200 BYTE),
TIMESTMP DATE,
MESSAGE VARCHAR2(4000),
KEY NUMBER(9)
);

CREATE TABLE MIG_LOG_INFO (
TABLE_NAME VARCHAR2(200 BYTE),
TIMESTMP DATE,
MESSAGE VARCHAR2(4000),
KEY NUMBER(9)
);

DROP TABLE CFG_QUESTION_TYPES CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_QUEST_TYPES_SEQ;
CREATE SEQUENCE CFG_QUEST_TYPES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_QUESTION_TYPES(
    QUESTION_TYPE_SID NUMBER,
    DESCR VARCHAR2(256 BYTE) NOT NULL ENABLE,
    MULTIPLE NUMBER,
    ACCESSOR VARCHAR2(32 BYTE),
    OPTIONS  VARCHAR2(32 BYTE),
    MAP_TO_RESP_CHOICES NUMBER,
        CONSTRAINT "CFG_QUESTION_TYPES_PK" PRIMARY KEY ("QUESTION_TYPE_SID")
);

CREATE OR REPLACE TRIGGER CFG_QUESTION_TYPES_TRG 
    BEFORE INSERT
    ON CFG_QUESTION_TYPES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_QUEST_TYPES_SEQ.NEXTVAL INTO :NEW.QUESTION_TYPE_SID FROM dual;
END CFG_QUESTION_TYPES_TRG;

/
ALTER TRIGGER "FGD"."CFG_QUESTION_TYPES_TRG" ENABLE;

DROP SEQUENCE QUESTIONS_SEQ;
DROP TABLE CFG_QUESTIONS CASCADE CONSTRAINTS;
CREATE SEQUENCE QUESTIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_QUESTIONS (
QUESTION_SID NUMBER(9) NOT NULL ENABLE,
DESCR VARCHAR2(400 BYTE) NOT NULL ENABLE,
    CONSTRAINT "QUESTIONS_PK" PRIMARY KEY ("QUESTION_SID"),
    CONSTRAINT "QUESTIONS_UK" UNIQUE ("DESCR")
);

CREATE OR REPLACE TRIGGER QUESTIONS_TRG
    BEFORE INSERT
    ON CFG_QUESTIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT QUESTIONS_SEQ.NEXTVAL INTO :NEW.QUESTION_SID FROM dual;
END QUESTIONS_TRG;
/
ALTER TRIGGER "QUESTIONS_TRG" ENABLE;

DROP TABLE QUESTIONS_MIG;
CREATE TABLE QUESTIONS_MIG (
OLD_QUESTION_SID NUMBER(9),
NEW_QUESTION_SID NUMBER(9),
NEW_QUESTION_VERSION_SID NUMBER(9),
STATUS NUMBER(1)
);
DROP TABLE QUESTION_VERSIONS_MIG;
CREATE TABLE QUESTION_VERSIONS_MIG (
OLD_ATTR_SID NUMBER,
NEW_QUESTION_VERSION_SID NUMBER);

drop sequence CFG_QUESTION_V_SEQ;
drop table cfg_question_versions CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_QUESTION_V_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_QUESTION_VERSIONS (
QUESTION_VERSION_SID NUMBER(9),
QUESTION_SID NUMBER(9),
QUESTION_TYPE_SID NUMBER(9),
HELP_TEXT VARCHAR2(4000 BYTE),
MANDATORY NUMBER(1),
INDEX_ATTR NUMBER(1),
ADD_INFO NUMBER(2),
MASTER_SID NUMBER(9),
ALWAYS_MODIFY NUMBER(1),
ACCESSOR VARCHAR2(400 BYTE),
    CONSTRAINT "CFG_QUESTION_V_PK" PRIMARY KEY ("QUESTION_VERSION_SID"),
    CONSTRAINT "CFG_QUESTION_V_FK1" FOREIGN KEY ("QUESTION_SID")
        REFERENCES "CFG_QUESTIONS" ("QUESTION_SID")
);

CREATE OR REPLACE TRIGGER CFG_QUESTION_V_TRG
    BEFORE INSERT
    ON CFG_QUESTION_VERSIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_QUESTION_V_SEQ.NEXTVAL INTO :NEW.QUESTION_VERSION_SID FROM dual;
END CFG_QUESTION_V_TRG;
/
ALTER TRIGGER "CFG_QUESTION_V_TRG" ENABLE;



drop table LOV_TYPES_MIG;
CREATE TABLE LOV_TYPES_MIG (
OLD_LOV_TYPE_SID NUMBER(9),
NEW_LOV_TYPE_SID NUMBER(9),
LOV_TYPE_ID VARCHAR2(2000 BYTE),
OLD_TABLE VARCHAR2(2000 BYTE),
STATUS NUMBER(1)
);

drop table LOVS_MIG;
CREATE TABLE LOVS_MIG (
OLD_LOV_SID NUMBER,
NEW_LOV_SID NUMBER,
LOV_TYPE_SID number,
DESCR VARCHAR2(1000 BYTE),
NEED_DET NUMBER,
OLD_TABLE VARCHAR2(1000 BYTE)
);

DROP TABLE CFG_DYNAMIC_LOV_TYPES CASCADE CONSTRAINTS;
CREATE TABLE CFG_DYNAMIC_LOV_TYPES(
DYN_SID NUMBER(9),
DESCR VARCHAR2(2000 BYTE),
    CONSTRAINT "DYN_LOV_TYPES_UK" UNIQUE ("DYN_SID")
);

drop table CFG_LOV_TYPES cascade constraints;
drop sequence CFG_LOV_TYPES_SEQ;
CREATE SEQUENCE CFG_LOV_TYPES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_LOV_TYPES (
LOV_TYPE_SID NUMBER(9) NOT NULL ENABLE,
LOV_TYPE_ID VARCHAR2(500 BYTE) NOT NULL ENABLE,
DESCR VARCHAR2(4000 BYTE) NOT NULL ENABLE,
DYN_SID NUMBER(1),
    CONSTRAINT "CFG_LOV_TYPES_PK" PRIMARY KEY ("LOV_TYPE_SID"),
    CONSTRAINT "CFG_LOV_TYPES_UK" UNIQUE ("LOV_TYPE_ID"),
    CONSTRAINT "CFG_LOV_TYPES_FK" FOREIGN KEY ("DYN_SID")
        REFERENCES "CFG_DYNAMIC_LOV_TYPES" ("DYN_SID")
);

CREATE OR REPLACE TRIGGER CFG_LOV_TYPES_TRG
    BEFORE INSERT
    ON CFG_LOV_TYPES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_LOV_TYPES_SEQ.NEXTVAL INTO :NEW.LOV_TYPE_SID FROM dual;
END CFG_LOV_TYPES_TRG;
/
ALTER TRIGGER "CFG_LOV_TYPES_TRG" ENABLE;

drop table cfg_lovs cascade constraints;
drop sequence CFG_LOVS_SEQ;
CREATE SEQUENCE CFG_LOVS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_LOVS (
LOV_SID NUMBER(9) NOT NULL ENABLE,
LOV_ID VARCHAR2(20 BYTE),
LOV_TYPE_SID NUMBER(9) NOT NULL ENABLE,
DESCR VARCHAR2(4000 BYTE) NOT NULL ENABLE,
NEED_DET NUMBER(1),
ORDER_BY NUMBER, 
CFG_TYPE NUMBER(2,0), 
HELP_TEXT VARCHAR2(4000 BYTE), 
CHOICE_LIMIT NUMBER(9,0),
    CONSTRAINT "CFG_LOVS_PK" PRIMARY KEY ("LOV_SID"),
    CONSTRAINT "CFG_LOVS_UK" UNIQUE ("LOV_TYPE_SID", "DESCR", "NEED_DET")
);

CREATE OR REPLACE TRIGGER CFG_LOVS_TRG
    BEFORE INSERT
    ON CFG_LOVS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_LOVS_SEQ.NEXTVAL INTO :NEW.LOV_SID FROM dual;
END CFG_LOVS_TRG;
/
ALTER TRIGGER "CFG_LOVS_TRG" ENABLE;

DROP TABLE CFG_DYNAMIC_LOVS CASCADE CONSTRAINTS;
CREATE TABLE CFG_DYNAMIC_LOVS(
LOV_TYPE_SID NUMBER NOT NULL ENABLE,
DYN_SID NUMBER NOT NULL ENABLE,
USED_LOV_TYPE_SID NUMBER,
USED_LOV_SID NUMBER,
APP_ID_DEP VARCHAR2(100 BYTE),
COUNTRY_DEP VARCHAR2(100 BYTE),
CFG_TYPE VARCHAR2(500 BYTE),
OTHER_CFG_TYPE VARCHAR2(2000 BYTE),
DESCR VARCHAR2(4000 BYTE),
    CONSTRAINT "DYN_LOVS_FK1" FOREIGN KEY ("LOV_TYPE_SID")
        REFERENCES "CFG_LOV_TYPES" ("LOV_TYPE_SID") ENABLE,
    CONSTRAINT "DYN_LOV_FK2" FOREIGN KEY ("DYN_SID")
        REFERENCES "CFG_DYNAMIC_LOV_TYPES" ("DYN_SID") ENABLE
);

DROP TABLE CFG_SPECIAL_LOVS CASCADE CONSTRAINTS;
CREATE TABLE CFG_SPECIAL_LOVS(
    LOV_TYPE_SID NUMBER,
    LOV_ID VARCHAR2(40 BYTE),
    LOV_SID NUMBER NOT NULL,
    DESCR VARCHAR2(2000 BYTE) NOT NULL,
    NEED_DET NUMBER,
    ORDER_BY NUMBER NOT NULL,
    CFG_TYPE NUMBER,
    HELP_TEXT VARCHAR2(4000 BYTE),
    CHOICE_LIMIT NUMBER,
    IS_GG NUMBER,
        CONSTRAINT "CFG_SPECIAL_LOVS_FK" FOREIGN KEY ("LOV_TYPE_SID")
            REFERENCES "CFG_LOV_TYPES"("LOV_TYPE_SID")
);

DROP SEQUENCE CFG_QUESTION_CONDS_SEQ;
DROP TABLE CFG_QUESTION_CONDITIONS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_QUESTION_CONDS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_QUESTION_CONDITIONS (
COND_SID NUMBER(9) NOT NULL ENABLE,
QUESTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
COND_QUESTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
LOV_SID NUMBER(9),
    CONSTRAINT "CFG_QUESTION_CONDS_PK" PRIMARY KEY ("COND_SID"),
    CONSTRAINT "CFG_QUESTION_CONDS_FK1" FOREIGN KEY ("QUESTION_VERSION_SID")
        REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID") ENABLE,
    CONSTRAINT "CFG_QUESTION_CONDS_FK2" FOREIGN KEY ("COND_QUESTION_VERSION_SID")
        REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID") ENABLE
);

CREATE OR REPLACE TRIGGER CFG_QUESTION_CONDS_TRG
    BEFORE INSERT
    ON CFG_QUESTION_CONDITIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_QUESTION_CONDS_SEQ.NEXTVAL INTO :NEW.COND_SID FROM dual;
END CFG_QUESTION_CONDS_TRG;
/
ALTER TRIGGER "CFG_QUESTION_CONDS_TRG" ENABLE;

DROP TABLE CONDITIONS_MIG;
CREATE TABLE CONDITIONS_MIG (
OLD_COND_SID NUMBER,
NEW_COND_SID NUMBER,
OLD_QUESTION_SID NUMBER,
OLD_COND_QUESTION_SID NUMBER,
NEW_QUESTION_VERSION_SID NUMBER,
NEW_COND_QUESTION_VERSION_SID NUMBER
);
DROP TABLE CFG_QUESTION_LOV_TYPES;
CREATE TABLE CFG_QUESTION_LOV_TYPES (
QUESTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
COND_SID NUMBER(9) ,
LOV_TYPE_SID NUMBER(9) NOT NULL ENABLE,
    CONSTRAINT "CFG_Q_LOV_TYPES_FK1" FOREIGN KEY ("QUESTION_VERSION_SID")
        REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID"),
    CONSTRAINT "CFG_Q_LOV_TYPES_FK2" FOREIGN KEY ("LOV_TYPE_SID")
        REFERENCES "CFG_LOV_TYPES" ("LOV_TYPE_SID")
);

DROP TABLE QUESTION_LOV_TYPES_MIG;
CREATE TABLE QUESTION_LOV_TYPES_MIG (
OLD_COND_SID NUMBER,
NEW_COND_SID NUMBER,
OLD_QUESTION_SID NUMBER,
NEW_QUESTION_VERSION_SID NUMBER,
OLD_LOV_TYPE_SID NUMBER,
NEW_LOV_TYPE_SID NUMBER
);


DROP SEQUENCE CFG_SECTIONS_SEQ;
DROP TABLE CFG_SECTIONS;
CREATE SEQUENCE CFG_SECTIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_SECTIONS (
SECTION_SID NUMBER(9) NOT NULL ENABLE,
SECTION_ID VARCHAR2(500 BYTE) NOT NULL ENABLE,
    CONSTRAINT "CFG_SECTIONS_PK" PRIMARY KEY ("SECTION_SID"),
    CONSTRAINT "CFG_SECTIONS_UK" UNIQUE ("SECTION_ID")
);

CREATE OR REPLACE TRIGGER CFG_SECTIONS_TRG
    BEFORE INSERT
    ON CFG_SECTIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_SECTIONS_SEQ.NEXTVAL INTO :NEW.SECTION_SID FROM dual;
END CFG_SECTIONS_TRG;
/
ALTER TRIGGER "CFG_SECTIONS_TRG" ENABLE;

DROP SEQUENCE CFG_SECTION_V_SEQ;
DROP TABLE CFG_SECTION_VERSIONS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_SECTION_V_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_SECTION_VERSIONS (
SECTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
SECTION_SID NUMBER(9) NOT NULL ENABLE,
DESCR VARCHAR2(1000 BYTE) NOT NULL ENABLE,
ASSESSMENT_PERIOD NUMBER(1) NOT NULL ENABLE,
NO_HELP NUMBER(1),
    CONSTRAINT "CFG_SECTION_V_PK" PRIMARY KEY ("SECTION_VERSION_SID")
);

CREATE OR REPLACE TRIGGER SECTION_V_TRG
    BEFORE INSERT
    ON CFG_SECTION_VERSIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_SECTION_V_SEQ.NEXTVAL INTO :NEW.SECTION_VERSION_SID FROM dual;
END SECTION_V_TRG;
/
ALTER TRIGGER "SECTION_V_TRG" ENABLE;


DROP TABLE CFG_UPDATABLE_SECTION_VERSIONS CASCADE CONSTRAINTS;
CREATE TABLE CFG_UPDATABLE_SECTION_VERSIONS (
SECTION_VERSION_SID NUMBER NOT NULL ENABLE,
EDIT_STEP_SID NUMBER NOT NULL ENABLE,
    CONSTRAINT "CFG_UPD_SEC_FK1" FOREIGN KEY ("SECTION_VERSION_SID")
        REFERENCES "CFG_SECTION_VERSIONS" ("SECTION_VERSION_SID") ENABLE,
    CONSTRAINT "CFG_UPD_SEC_FK2" FOREIGN KEY ("EDIT_STEP_SID")
        REFERENCES "CFG_EDIT_STEPS" ("EDIT_STEP_SID") ENABLE
);

DROP TABLE SECTIONS_MIG;
CREATE TABLE SECTIONS_MIG (
OLD_SECTION_SID NUMBER,
NEW_SECTION_SID NUMBER,
SECTION_VERSION_SID NUMBER,
OLD_QST NUMBER
);

DROP SEQUENCE CFG_QSTNNRS_SEQ;
DROP TABLE CFG_QUESTIONNAIRES CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_QSTNNRS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_QUESTIONNAIRES (
QUESTIONNAIRE_SID NUMBER(2) NOT NULL ENABLE,
APP_ID VARCHAR2(20 BYTE) NOT NULL ENABLE,
DESCR VARCHAR2(500 BYTE) NOT NULL ENABLE,
    CONSTRAINT "CFG_QSTNNRS_PK" PRIMARY KEY ("QUESTIONNAIRE_SID"),
    CONSTRAINT "CFG_QSTNNRS_UK" UNIQUE ("APP_ID")
);

CREATE OR REPLACE TRIGGER CFG_QSTNNRS_TRG
    BEFORE INSERT
    ON CFG_QUESTIONNAIRES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_QSTNNRS_SEQ.NEXTVAL INTO :NEW.QUESTIONNAIRE_SID FROM dual;
END CFG_QSTNNRS_TRG;
/
ALTER TRIGGER "CFG_QSTNNRS_TRG" ENABLE;

DROP SEQUENCE CFG_QSTNNRS_V_SEQ;
DROP TABLE CFG_QSTNNR_VERSIONS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_QSTNNRS_V_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_QSTNNR_VERSIONS (
QSTNNR_VERSION_SID NUMBER(9) NOT NULL ENABLE,
QUESTIONNAIRE_SID NUMBER(9) NOT NULL ENABLE,
COUNTRY_GROUP_ID VARCHAR2(40 BYTE) NOT NULL ENABLE,
    CONSTRAINT "CFG_QSTNNRS_V_PK" PRIMARY KEY("QSTNNR_VERSION_SID"),
    CONSTRAINT "CFG_QSTNNRS_V_FK" FOREIGN KEY ("QUESTIONNAIRE_SID")
        REFERENCES "CFG_QUESTIONNAIRES" ("QUESTIONNAIRE_SID") ENABLE
);

CREATE OR REPLACE TRIGGER CFG_QSTNNRS_V_TRG
    BEFORE INSERT
    ON CFG_QSTNNR_VERSIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_QSTNNRS_V_SEQ.NEXTVAL INTO :NEW.QSTNNR_VERSION_SID FROM dual;
END CFG_QSTNNRS_V_TRG;
/
ALTER TRIGGER "CFG_QSTNNRS_V_TRG" ENABLE;

DROP TABLE QUESTIONNAIRES_MIG;
CREATE TABLE QUESTIONNAIRES_MIG (
OLD_QUESTIONNAIRE_SID NUMBER,
QSTNNR_VERSION_SID NUMBER,
COUNTRY_GROUP_ID VARCHAR2(40 BYTE));
DROP TABLE CFG_QSTNNR_VER_SECTIONS;
CREATE TABLE CFG_QSTNNR_VER_SECTIONS (
QSTNNR_VERSION_SID NUMBER(9) NOT NULL ENABLE,
SECTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
ORDER_BY NUMBER(2) NOT NULL ENABLE,
    CONSTRAINT "CFG_QSTNNR_VERS_FK1" FOREIGN KEY ("QSTNNR_VERSION_SID")
        REFERENCES "CFG_QSTNNR_VERSIONS" ("QSTNNR_VERSION_SID") ENABLE,
    CONSTRAINT "CFG_QSTNNR_VERS_FK2" FOREIGN KEY ("SECTION_VERSION_SID")
        REFERENCES "CFG_SECTION_VERSIONS" ("SECTION_VERSION_SID")
);

DROP TABLE CFG_QSTNNR_VER_SUBSECTIONS;
CREATE TABLE CFG_QSTNNR_VER_SUBSECTIONS (
QSTNNR_VERSION_SID NUMBER(9) NOT NULL ENABLE,
PARENT_SECTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
SUB_SECTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
ORDER_BY NUMBER(2),
    CONSTRAINT "CFG_QSQSTNNR_VER_SS_FK1" FOREIGN KEY ("QSTNNR_VERSION_SID")
        REFERENCES "CFG_QSTNNR_VERSIONS" ("QSTNNR_VERSION_SID") ENABLE,
    CONSTRAINT "CFG_QSQSTNNR_VER_SS_FK2" FOREIGN KEY ("PARENT_SECTION_VERSION_SID")
        REFERENCES "CFG_SECTION_VERSIONS" ("SECTION_VERSION_SID") ENABLE,
    CONSTRAINT "CFG_QSQSTNNR_VER_SS_FK3" FOREIGN KEY ("SUB_SECTION_VERSION_SID")
        REFERENCES "CFG_SECTION_VERSIONS" ("SECTION_VERSION_SID") ENABLE
);

DROP TABLE QSTNNR_VER_SECTIONS_MIG;
CREATE TABLE QSTNNR_VER_SECTIONS_MIG (
OLD_questionnaire_sid NUMBER,
OLD_section_sid NUMBER,
section_version_sid NUMBER,
QSTNNR_VERSION_SID NUMBER,
ORDER_BY NUMBER
);

DROP TABLE QSTNNR_VER_SUBSECTIONS_MIG;
CREATE TABLE QSTNNR_VER_SUBSECTIONS_MIG (
OLD_QUESTIONNAIRE_SID NUMBER,
OLD_PARENT_SECTION NUMBER,
OLD_SECTION NUMBER,
QSTNNR_VERSION_SID NUMBER,
PARENT_SECTION NUMBER,
SECTION NUMBER,
ORDER_BY NUMBER
);

DROP TABLE CFG_QSTNNR_SECTION_QUESTIONS;
CREATE TABLE CFG_QSTNNR_SECTION_QUESTIONS (
SECTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
QUESTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
ORDER_BY NUMBER (2) NOT NULL ENABLE,
    CONSTRAINT "CFG_QSQ_FK1" FOREIGN KEY ("QUESTION_VERSION_SID")
        REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID") ENABLE,
    CONSTRAINT "CFG_QSQ_FK2" FOREIGN KEY ("SECTION_VERSION_SID")
        REFERENCES "CFG_SECTION_VERSIONS" ("SECTION_VERSION_SID") ENABLE    
);

DROP TABLE SECTION_QUESTIONS_MIG;
CREATE TABLE SECTION_QUESTIONS_MIG (
OLD_SECTION_SID NUMBER,
OLD_ATTR_SID NUMBER,
SECTION_VERSION_SID NUMBER,
QUESTION_VERSION_SID NUMBER,
ORDER_BY NUMBER
);

DROP SEQUENCE CFG_EDIT_STEPS_SEQ;
DROP TABLE CFG_EDIT_STEPS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_EDIT_STEPS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_EDIT_STEPS(
"EDIT_STEP_SID" NUMBER(8,0) NOT NULL ENABLE, 
"EDIT_STEP_ID" VARCHAR2(3 BYTE), 
"DESCR" VARCHAR2(30 BYTE), 
"ORDER_BY" NUMBER(8,0), 
	 CONSTRAINT "FGD_CFG_EDIT_STEPS_PK" PRIMARY KEY ("EDIT_STEP_SID")
);
CREATE OR REPLACE TRIGGER CFG_EDIT_STEPS_TRG
    BEFORE INSERT
    ON CFG_EDIT_STEPS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_EDIT_STEPS_SEQ.NEXTVAL INTO :NEW.EDIT_STEP_SID FROM dual;
END CFG_EDIT_STEPS_TRG;
/
ALTER TRIGGER "CFG_EDIT_STEPS_TRG" ENABLE;

DROP SEQUENCE ENTRY_SEQ;
DROP TABLE ENTRIES CASCADE CONSTRAINTS;
CREATE SEQUENCE ENTRY_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE ENTRIES(
    ENTRY_SID NUMBER(9) NOT NULL ENABLE,
    ENTRY_NO NUMBER(9) NOT NULL ENABLE,
    ENTRY_VERSION NUMBER(9) NOT NULL ENABLE,
    COUNTRY_ID VARCHAR2(9) NOT NULL ENABLE,
    APP_ID VARCHAR2(50 BYTE) NOT NULL ENABLE,
    APPRV_DATE DATE,
    IMPL_DATE DATE,
    ABOLITION_DATE DATE,
    REFORM_IMPL_DATE DATE,
    REFORM_REPLACED_DATE DATE,
    REFORM_ADOPT_DATE DATE,
    ABOLITION_REASON VARCHAR2(4000 BYTE),
    REFORM_REASON VARCHAR2(4000 BYTE),
        CONSTRAINT "ENTRIES_PK" PRIMARY KEY ("ENTRY_SID"),
        CONSTRAINT "ENTRIES_UK" UNIQUE ("COUNTRY_ID", "ENTRY_NO", "ENTRY_VERSION", "APP_ID"),
        CONSTRAINT "ENTRIES_FK" FOREIGN KEY ("APP_ID")
            REFERENCES "CFG_QUESTIONNAIRES" ("APP_ID")
);

CREATE OR REPLACE TRIGGER ENTRIES_TRG
    BEFORE INSERT
    ON ENTRIES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT ENTRY_SEQ.NEXTVAL INTO :NEW.ENTRY_SID FROM dual;
END ENTRIES_TRG;
/
ALTER TRIGGER ENTRIES_TRG ENABLE;

DROP TABLE ENTRIES_MIG;
CREATE TABLE ENTRIES_MIG (
OLD_SID NUMBER,
NEW_SID NUMBER,
OLD_TABLE VARCHAR2(400 BYTE));

DROP SEQUENCE ENTRY_EDIT_STEPS_SEQ;
DROP TABLE ENTRY_EDIT_STEPS CASCADE CONSTRAINTS;
CREATE SEQUENCE ENTRY_EDIT_STEPS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE ENTRY_EDIT_STEPS (
ENTRY_EDIT_STEP_SID NUMBER(9),
ENTRY_SID NUMBER(9) NOT NULL ENABLE,
EDIT_STEP_SID NUMBER(9) NOT NULL ENABLE,
ROUND_SID NUMBER(9) NOT NULL ENABLE,
LAST_LOGIN VARCHAR2(30 BYTE),
LAST_MODIF_DATE DATE,
PREV_STEP_SID NUMBER(9),
    CONSTRAINT "ENTRY_EDIT_STEPS_PK" PRIMARY KEY ("ENTRY_EDIT_STEP_SID"),
    CONSTRAINT "ENTRY_EDIT_STEPS_FK1" FOREIGN KEY ("EDIT_STEP_SID")
        REFERENCES "CFG_EDIT_STEPS" ("EDIT_STEP_SID") ENABLE,
    CONSTRAINT "ENTRY_EDIT_STEPS_FK2" FOREIGN KEY ("PREV_STEP_SID")
        REFERENCES "CFG_EDIT_STEPS" ("EDIT_STEP_SID") ENABLE
);

CREATE OR REPLACE TRIGGER ENTRY_EDIT_STEPS_TRG1
    BEFORE INSERT
    ON ENTRY_EDIT_STEPS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT ENTRY_EDIT_STEPS_SEQ.NEXTVAL INTO :NEW.ENTRY_EDIT_STEP_SID FROM dual;
END ENTRY_EDIT_STEPS_TRG1;
/
ALTER TRIGGER "ENTRY_EDIT_STEPS_TRG1" ENABLE;

CREATE OR REPLACE TRIGGER ENTRY_EDIT_STEPS_TRG2
    BEFORE UPDATE OF EDIT_STEP_SID
    ON ENTRY_EDIT_STEPS
    FOR EACH ROW
    DECLARE
    BEGIN
       :NEW.PREV_STEP_SID := :OLD.EDIT_STEP_SID;
END ENTRY_EDIT_STEPS_TRG2;
/
ALTER TRIGGER "ENTRY_EDIT_STEPS_TRG2" ENABLE;

DROP TABLE ENTRY_EDIT_STEPS_MIG;
CREATE TABLE ENTRY_EDIT_STEPS_MIG (
NEW_EDIT_STEP_SID NUMBER,
OLD_SID NUMBER,  
NEW_SID NUMBER, 
EDIT_STEP_SID NUMBER, 
ROUND_SID NUMBER, 
LAST_LOGIN VARCHAR2(400 BYTE),
LAST_MODIF_DATE DATE,
PREV_STEP_SID NUMBER,
OLD_TABLE VARCHAR2(400 BYTE));


DROP SEQUENCE ENTRY_CHOICES_SEQ;
DROP TABLE ENTRY_CHOICES CASCADE CONSTRAINTS;
CREATE SEQUENCE ENTRY_CHOICES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE ENTRY_CHOICES(
ENTRY_CHOICE_SID NUMBER(9),
ENTRY_SID NUMBER(9) NOT NULL ENABLE,
QUESTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
RESPONSE VARCHAR2(4000 BYTE),
DETAILS VARCHAR2(4000 BYTE),
ASSESSMENT_PERIOD NUMBER(1),
    CONSTRAINT "ENTRY_CHOICES_PK" PRIMARY KEY ("ENTRY_CHOICE_SID"),
    CONSTRAINT "ENTRY_CHOICES_FK1" FOREIGN KEY ("ENTRY_SID")
        REFERENCES "ENTRIES" ("ENTRY_SID") ENABLE,
    CONSTRAINT "ENTRY_CHOICES_FK2" FOREIGN KEY ("QUESTION_VERSION_SID")
        REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID")
);


CREATE OR REPLACE TRIGGER ENTRY_CHOICES_TRG
    BEFORE INSERT
    ON ENTRY_CHOICES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT ENTRY_CHOICES_SEQ.NEXTVAL INTO :NEW.ENTRY_CHOICE_SID FROM dual;
END ENTRY_CHOICES_TRG;
/
ALTER TRIGGER "ENTRY_CHOICES_TRG" ENABLE;


DROP TABLE TARGET_ENTRIES;
CREATE TABLE TARGET_ENTRIES (
    ENTRY_SID NUMBER,
    QUESTION_VERSION_SID NUMBER,
    RESPONSE_SID NUMBER,
    VALUE NUMBER,
    NOT_APPLICABLE NUMBER,
    DESCR VARCHAR2(4000 BYTE),
        CONSTRAINT "TARGET_ENTRIES_FK1" FOREIGN KEY ("ENTRY_SID")
            REFERENCES "ENTRIES" ("ENTRY_SID") ENABLE,
        CONSTRAINT "TARGET_ENTRIES_FK2" FOREIGN KEY ("QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID") ENABLE
);

DROP TABLE TARGET_ENTRIES_CFG;
CREATE TABLE TARGET_ENTRIES_CFG (
    APP_ID VARCHAR2(20 BYTE),
    DEPENDENT_QUESTION NUMBER,
    YEARS_PREV_COUNT NUMBER,
    YEAR_CURR_ROUND NUMBER,
    YEARS_FORW_COUNT NUMBER,
        CONSTRAINT "TARGET_ENTRIES_CFG_FK1" FOREIGN KEY ("APP_ID")
            REFERENCES "CFG_QUESTIONNAIRES" ("APP_ID"),
        CONSTRAINT "TARGET_ENTRIES_CFG_FK2" FOREIGN KEY ("DEPENDENT_QUESTION")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID"),
        CONSTRAINT "TARGET_ENTRIES_CFG_UK" UNIQUE  ("APP_ID", "DEPENDENT_QUESTION")
);

DROP TABLE ENTRY_CHOICES_ADD_INFOS CASCADE CONSTRAINTS;
CREATE TABLE ENTRY_CHOICES_ADD_INFOS (
    ENTRY_SID NUMBER,
    QUESTION_VERSION_SID NUMBER,
    DESCR VARCHAR2(4000 BYTE),
    PERIOD_SID NUMBER,
        CONSTRAINT "ENTRY_CHOICES_ADD_INFOS_FK1" FOREIGN KEY ("ENTRY_SID")
            REFERENCES "ENTRIES" ("ENTRY_SID"),
        CONSTRAINT "ENTRY_CHOICES_ADD_INFOS_FK2" FOREIGN KEY ("QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID")
);

DROP TABLE CFG_QSTNNR_STATUS CASCADE CONSTRAINTS;
CREATE TABLE CFG_QSTNNR_STATUS (
    STATUS_SID NUMBER NOT NULL ENABLE,
    DESCR VARCHAR2(300 BYTE),
    CONSTRAINT "CFG_QSTNNR_STATUS_UK" UNIQUE ("STATUS_SID")
);

DROP TABLE QSTNNR_CTY_STATUS CASCADE CONSTRAINTS;
DROP SEQUENCE QSTNNR_CTY_STATUS_SEQ;
CREATE SEQUENCE QSTNNR_CTY_STATUS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE QSTNNR_CTY_STATUS (
    CTY_STATUS_SID NUMBER,
    STATUS_SID NUMBER NOT NULL ENABLE,
    COUNTRY_ID VARCHAR2(20 BYTE) NOT NULL ENABLE,
    QUESTIONNAIRE_SID NUMBER NOT NULL ENABLE,
    ROUND_SID NUMBER NOT NULL ENABLE,
    SUBMIT_LOGIN VARCHAR2(50 BYTE) NOT NULL ENABLE,
    SUBMIT_DATE DATE NOT NULL ENABLE,
    CONSTRAINT "QSTNNR_CTY_STATUS_PK" PRIMARY KEY ("CTY_STATUS_SID"),
    CONSTRAINT "QSTNNR_CTY_STATUS_FK1" FOREIGN KEY ("STATUS_SID")
        REFERENCES "CFG_QSTNNR_STATUS" ("STATUS_SID") ENABLE,
    CONSTRAINT "QSTNNR_CTY_STATUS_FK2" FOREIGN KEY ("QUESTIONNAIRE_SID")
        REFERENCES "CFG_QUESTIONNAIRES" ("QUESTIONNAIRE_SID") ENABLE
);

CREATE OR REPLACE TRIGGER QSTNNR_CTY_STATUS_TRG
    BEFORE INSERT
    ON QSTNNR_CTY_STATUS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT QSTNNR_CTY_STATUS_SEQ.NEXTVAL INTO :NEW.CTY_STATUS_SID FROM dual;
END QSTNNR_CTY_STATUS_TRG;
/
ALTER TRIGGER "QSTNNR_CTY_STATUS_TRG" ENABLE;

DROP SEQUENCE CFG_UI_ELEMENT_TYPES_SEQ;
DROP TABLE CFG_UI_ELEMENT_TYPES CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_UI_ELEMENT_TYPES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_UI_ELEMENT_TYPES(
    ELEMENT_TYPE_SID NUMBER,
    ELEMENT_TYPE_ID VARCHAR2(500 BYTE) NOT NULL ENABLE,
    DESCR VARCHAR2(1000 BYTE) NOT NULL ENABLE,
        CONSTRAINT "CFG_UI_ELEMENT_TYPES_PK" PRIMARY KEY ("ELEMENT_TYPE_SID"),
        CONSTRAINT "CFG_UI_ELEMENT_TYPES_UK" UNIQUE ("ELEMENT_TYPE_ID")
);

CREATE OR REPLACE TRIGGER CFG_UI_ELEMENT_TYPES_TRG
    BEFORE INSERT
    ON CFG_UI_ELEMENT_TYPES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_UI_ELEMENT_TYPES_SEQ.NEXTVAL INTO :NEW.ELEMENT_TYPE_SID FROM dual;
END CFG_UI_ELEMENT_TYPES_TRG;
/
ALTER TRIGGER "CFG_UI_ELEMENT_TYPES_TRG" ENABLE;

DROP SEQUENCE CFG_UI_QSTNNR_ELEMENTS_SEQ;
DROP TABLE CFG_UI_QSTNNR_ELEMENTS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_UI_QSTNNR_ELEMENTS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_UI_QSTNNR_ELEMENTS (
	QSTNNR_ELEM_SID NUMBER,
	ELEMENT_TYPE_SID NUMBER,
	ELEMENT_TEXT VARCHAR2(4000 BYTE),
	QSTNNR_VERSION_SID NUMBER,
	EDIT_STEP_ID VARCHAR2(400 BYTE),
		CONSTRAINT "CFG_UI_QSTNNR_ELEMENTS_PK" PRIMARY KEY ("QSTNNR_ELEM_SID"),
		CONSTRAINT "CFG_UI_QSTNNR_ELEMENTS_FK1" FOREIGN KEY ("ELEMENT_TYPE_SID")
			REFERENCES "CFG_UI_ELEMENT_TYPES" ("ELEMENT_TYPE_SID") ENABLE
);
CREATE OR REPLACE TRIGGER CFG_UI_QSTNNR_ELEMENTS_TRG
    BEFORE INSERT
    ON CFG_UI_QSTNNR_ELEMENTS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_UI_QSTNNR_ELEMENTS_SEQ.NEXTVAL INTO :NEW.QSTNNR_ELEM_SID FROM dual;
END CFG_UI_QSTNNR_ELEMENTS_TRG;
/
ALTER TRIGGER "CFG_UI_QSTNNR_ELEMENTS_TRG" ENABLE;

DROP SEQUENCE CFG_CUSTOM_HEADERS_SEQ;
DROP TABLE CFG_CUSTOM_HEADERS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_CUSTOM_HEADERS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_CUSTOM_HEADERS (
    CUSTOM_HEADER_SID NUMBER,
    CUSTOM_HEADER_ID VARCHAR2(500 BYTE) NOT NULL ENABLE,
    QSTNNR_VERSION_SID NUMBER,
    WIDTH NUMBER,
    ORDER_BY NUMBER,
    IN_QUESTIONNAIRE VARCHAR2(500 BYTE),
    IN_SCORES VARCHAR2(500 BYTE),
    IN_INDEXES VARCHAR2(500 BYTE),
        CONSTRAINT "CFG_CUSTOM_HEADERS_PK" PRIMARY KEY ("CUSTOM_HEADER_SID"),
        CONSTRAINT "CFG_CUSTOM_HEADERS_FK1" FOREIGN KEY ("QSTNNR_VERSION_SID")
            REFERENCES "CFG_QSTNNR_VERSIONS" ("QSTNNR_VERSION_SID")
);

CREATE OR REPLACE TRIGGER CFG_CUSTOM_HEADERS_TRG
    BEFORE INSERT
    ON CFG_CUSTOM_HEADERS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_CUSTOM_HEADERS_SEQ.NEXTVAL INTO :NEW.CUSTOM_HEADER_SID FROM dual;
END CFG_CUSTOM_HEADERS_TRG;
/
ALTER TRIGGER "CFG_CUSTOM_HEADERS_TRG" ENABLE;

DROP SEQUENCE CFG_HEADERS_SEQ;
DROP TABLE CFG_HEADERS CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_HEADERS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_HEADERS (
    HEADER_SID NUMBER,
    QSTNNR_VERSION_SID NUMBER,
    SECTION_VERSION_SID NUMBER,
    QUESTION_VERSION_SID NUMBER,
    SHORT VARCHAR2(100 BYTE),
    WIDTH NUMBER,
    MAPPING_TYPE VARCHAR2(100 BYTE),
    ORDER_BY NUMBER NOT NULL ENABLE,
    IN_QUESTIONNAIRE NUMBER,
    IN_SCORES NUMBER,
    IN_INDEXES NUMBER,
    ACCESSOR VARCHAR2(300 BYTE),
        CONSTRAINT "CFG_HEADERS_PK" PRIMARY KEY ("HEADER_SID"),
        CONSTRAINT "CFG_HEADERS_FK1" FOREIGN KEY ("QSTNNR_VERSION_SID")
            REFERENCES "CFG_QSTNNR_VERSIONS" ("QSTNNR_VERSION_SID") ENABLE,
        CONSTRAINT "CFG_HEADERS_FK2" FOREIGN KEY ("SECTION_VERSION_SID")
            REFERENCES "CFG_SECTION_VERSIONS" ("SECTION_VERSION_SID") ENABLE,
        CONSTRAINT "CFG_HEADERS_FK3" FOREIGN KEY ("QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID") ENABLE
);

CREATE OR REPLACE TRIGGER CFG_HEADERS_TRG
    BEFORE INSERT
    ON CFG_HEADERS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_HEADERS_SEQ.NEXTVAL INTO :NEW.HEADER_SID FROM dual;
END CFG_HEADERS_TRG;
/
ALTER TRIGGER "CFG_HEADERS_TRG" ENABLE;

DROP TABLE CFG_SCORE_TYPES CASCADE CONSTRAINTS;
CREATE TABLE CFG_SCORE_TYPES (
    SCORE_TYPE_SID NUMBER,
    DESCR VARCHAR2(2000 BYTE),
    ACCESSOR VARCHAR2(100 BYTE),
        CONSTRAINT "CFG_SCORE_TYPES_PK" PRIMARY KEY ("SCORE_TYPE_SID")
);

DROP TABLE CFG_INDEXES CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_INDEXES_SEQ;
CREATE SEQUENCE CFG_INDEXES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_INDEXES (
    INDEX_SID NUMBER,
    QUESTIONNAIRE_SID NUMBER,
    INDEX_ID VARCHAR2(20 BYTE),
    DESCR VARCHAR2(400 BYTE),
    IS_ANNUAL NUMBER(1),
    IN_MAIL_TEXT VARCHAR2(400 BYTE),
        CONSTRAINT "CFG_INDEXES_PK" PRIMARY KEY ("INDEX_SID"),
        CONSTRAINT "CFG_INDEXES_FK1" FOREIGN KEY ("QUESTIONNAIRE_SID")
            REFERENCES "CFG_QUESTIONNAIRES" ("QUESTIONNAIRE_SID")
);
CREATE OR REPLACE TRIGGER CFG_INDEXES_TRG
    BEFORE INSERT
    ON CFG_INDEXES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDEXES_SEQ.NEXTVAL INTO :NEW.INDEX_SID FROM dual;
END CFG_INDEXES_TRG;
/
ALTER TRIGGER "CFG_INDEXES_TRG" ENABLE;

DROP TABLE CFG_INDEX_CRITERIA CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_INDEX_CRITERIA_SEQ;
CREATE SEQUENCE CFG_INDEX_CRITERIA_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_INDEX_CRITERIA (
    CRITERION_SID NUMBER,
    CRITERION_ID VARCHAR2(20 BYTE),
    SUB_CRITERION_ID VARCHAR2(20 BYTE),
    DESCR VARCHAR2(500 BYTE),
    INDEX_SID NUMBER,
    HELP_TEXT VARCHAR2(4000 BYTE),
    SCORE_TYPE_SID NUMBER,
        CONSTRAINT "CFG_INDEX_CRITERIA_PK" PRIMARY KEY ("CRITERION_SID"),
        CONSTRAINT "CFG_INDEX_CRITERIA_FK1" FOREIGN KEY ("INDEX_SID")
            REFERENCES "CFG_INDEXES"("INDEX_SID"),
        CONSTRAINT "CFG_INDEX_CRITERIA_FK2" FOREIGN KEY ("SCORE_TYPE_SID")
            REFERENCES "CFG_SCORE_TYPES"("SCORE_TYPE_SID")
);
CREATE OR REPLACE TRIGGER CFG_INDEX_CRITERIA_TRG
    BEFORE INSERT
    ON CFG_INDEX_CRITERIA
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDEX_CRITERIA_SEQ.NEXTVAL INTO :NEW.CRITERION_SID FROM dual;
END CFG_INDEX_CRITERIA_TRG;
/
ALTER TRIGGER "CFG_INDEX_CRITERIA_TRG" ENABLE;

DROP TABLE CFG_INDEX_CRITERIA_SCORES CASCADE CONSTRAINTS;
CREATE TABLE CFG_INDEX_CRITERIA_SCORES (
    CRITERION_SID NUMBER,
    SCORE NUMBER,
        CONSTRAINT "CFG_INDEX_CRITERIA_SC_FK1" FOREIGN KEY ("CRITERION_SID")
            REFERENCES "CFG_INDEX_CRITERIA"("CRITERION_SID")
);

DROP TABLE CFG_INDEX_STAGES CASCADE CONSTRAINTS;
CREATE TABLE CFG_INDEX_STAGES (
    SCORE_VERSION_SID NUMBER,
    SCORE_VERSION_ID VARCHAR2(100 BYTE),
    ORDER_BY NUMBER,
    AUTOMATIC NUMBER,
    ITERABLE NUMBER,
    MS_SHARED NUMBER,
    READ_ONLY NUMBER,
    FILL_BLANKS NUMBER,
        CONSTRAINT "CFG_INDEX_STAGES_PK" PRIMARY KEY ("SCORE_VERSION_SID")
);

DROP TABLE CFG_INDEX_STAGE_VERSIONS CASCADE CONSTRAINTS;
CREATE TABLE CFG_INDEX_STAGE_VERSIONS (
    SCORE_VERSION_SID NUMBER,
    INDEX_SID NUMBER,
    DESCR VARCHAR2(500 BYTE),
        CONSTRAINT "CFG_INDEX_STAGE_VERSIONS_FK1" FOREIGN KEY ("SCORE_VERSION_SID")
            REFERENCES "CFG_INDEX_STAGES" ("SCORE_VERSION_SID"),
        CONSTRAINT "CFG_INDEX_STAGE_VERSIONS_FK2" FOREIGN KEY ("INDEX_SID")
            REFERENCES "CFG_INDEXES" ("INDEX_SID")
);

DROP TABLE CFG_CRITERION_QUESTIONS CASCADE CONSTRAINTS;
CREATE TABLE CFG_CRITERION_QUESTIONS(
    CRITERION_SID NUMBER, 
	QUESTION_VERSION_SID NUMBER, 
	ORDER_BY NUMBER, 
	PERIOD_SID NUMBER,
        CONSTRAINT "CFG_CRITERION_QUESTIONS_FK1" FOREIGN KEY ("CRITERION_SID")
            REFERENCES "CFG_INDEX_CRITERIA" ("CRITERION_SID"),
        CONSTRAINT "CFG_CRITERION_QUESTIONS_FK2" FOREIGN KEY ("QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID")
);

DROP TABLE ENTRY_CRITERIA CASCADE CONSTRAINTS;
DROP SEQUENCE ENTRY_CRITERIA_SEQ;
CREATE SEQUENCE ENTRY_CRITERIA_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE ENTRY_CRITERIA (
    ENTRY_CRITERIA_SID NUMBER,
    ENTRY_SID NUMBER,
    CRITERION_SID NUMBER,
    SCORE_VERSION_SID NUMBER,
    SCORE NUMBER,
    LDAP_LOGIN VARCHAR2(100 BYTE),
    DATETIME DATE,
    ORGANISATION VARCHAR2(100 BYTE),
    ROUND_SID NUMBER,
        CONSTRAINT "ENTRY_CRITERIA_PK" PRIMARY KEY ("ENTRY_CRITERIA_SID"),
        CONSTRAINT "ENTRY_CRITERIA_FK1" FOREIGN KEY ("ENTRY_SID")
            REFERENCES "ENTRIES" ("ENTRY_SID") ENABLE,
        CONSTRAINT "ENTRY_CRITERIA_FK2" FOREIGN KEY ("CRITERION_SID")
            REFERENCES "CFG_INDEX_CRITERIA" ("CRITERION_SID") ENABLE,
        CONSTRAINT "ENTRY_CRITERIA_FK3" FOREIGN KEY ("SCORE_VERSION_SID")
            REFERENCES "CFG_INDEX_STAGES" ("SCORE_VERSION_SID") ENABLE
);

CREATE OR REPLACE TRIGGER ENTRY_CRITERIA_TRG
    BEFORE INSERT
    ON ENTRY_CRITERIA
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDEX_CRITERIA_SEQ.NEXTVAL INTO :NEW.ENTRY_CRITERIA_SID FROM dual;
END ENTRY_CRITERIA_TRG;
/
ALTER TRIGGER "ENTRY_CRITERIA_TRG" ENABLE;
DROP TABLE ENTRY_CRITERIA_MIG;
CREATE TABLE ENTRY_CRITERIA_MIG (
    OLD_ENTRY_SID NUMBER,
    OLD_TABLE VARCHAR2(500 BYTE),
    NEW_ENTRY_SID NUMBER
);

DROP TABLE ENTRY_ACCEPTED_CRITERIA CASCADE CONSTRAINTS;
CREATE TABLE ENTRY_ACCEPTED_CRITERIA (
    ENTRY_CRITERIA_SID NUMBER,
    LDAP_LOGIN VARCHAR2(200 BYTE),
    DATETIME DATE,
    ORGANISATION VARCHAR2(200 BYTE),
        CONSTRAINT "ENTRY_ACCEPTED_CRITERIA_FK" FOREIGN KEY ("ENTRY_CRITERIA_SID")
            REFERENCES "ENTRY_CRITERIA" ("ENTRY_CRITERIA_SID")
);

DROP SEQUENCE ENTRY_CRITERIA_COMMENTS_SEQ;
DROP TABLE ENTRY_CRITERIA_COMMENTS CASCADE CONSTRAINTS;
CREATE SEQUENCE ENTRY_CRITERIA_COMMENTS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE ENTRY_CRITERIA_COMMENTS (
    COMMENT_SID NUMBER,
    ENTRY_CRITERIA_SID NUMBER,
    DESCR VARCHAR2(4000 BYTE),
    LDAP_LOGIN VARCHAR2(20 BYTE),
    ORGANISATION VARCHAR2(100 BYTE),
    DATETIME DATE,
        CONSTRAINT "ENTRY_CRITERIA_COMMENTS_PK" PRIMARY KEY ("COMMENT_SID"),
        CONSTRAINT "ENTRY_CRITERIA_COMMENTS_FK1" FOREIGN KEY ("ENTRY_CRITERIA_SID")
            REFERENCES "ENTRY_CRITERIA" ("ENTRY_CRITERIA_SID")
);
CREATE OR REPLACE TRIGGER ENTRY_CRITERIA_COMMENTS_TRG
    BEFORE INSERT
    ON ENTRY_CRITERIA_COMMENTS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT ENTRY_CRITERIA_COMMENTS_SEQ.NEXTVAL INTO :NEW.COMMENT_SID FROM dual;
END ENTRY_CRITERIA_COMMENTS_TRG;
/
ALTER TRIGGER "ENTRY_CRITERIA_COMMENTS_TRG" ENABLE;

DROP TABLE ENTRY_CRITERIA_COMM_MIG;
CREATE TABLE ENTRY_CRITERIA_COMM_MIG(
OLD_COMMENT_SID NUMBER,
NEW_COMMENT_SID NUMBER,
OLD_TABLE VARCHAR2(400 BYTE)
);

DROP TABLE CFG_INDEX_CHOICES_SCORES CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_INDEX_CHOICES_SCORES_SEQ;
CREATE SEQUENCE CFG_INDEX_CHOICES_SCORES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_INDEX_CHOICES_SCORES (
    CHOICE_SCORE_SID NUMBER,
    QUESTION_VERSION_SID NUMBER,
    LOV_SID NUMBER,
    CRITERION_SID NUMBER,
    SCORE NUMBER,
        CONSTRAINT "CFG_INDEX_CHOICES_SCORES_PK" PRIMARY KEY ("CHOICE_SCORE_SID"),
        CONSTRAINT "CFG_INDEX_CHOICES_SCORES_FK1" FOREIGN KEY ("QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID") ENABLE,
        CONSTRAINT "CFG_INDEX_CHOICES_SCORES_FK2" FOREIGN KEY ("CRITERION_SID")
            REFERENCES "CFG_INDEX_CRITERIA" ("CRITERION_SID")
);

CREATE OR REPLACE TRIGGER CFG_INDEX_CHOICES_SCORES_TRG
    BEFORE INSERT
    ON CFG_INDEX_CHOICES_SCORES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDEX_CHOICES_SCORES_SEQ.NEXTVAL INTO :NEW.CHOICE_SCORE_SID FROM dual;
END CFG_INDEX_CHOICES_SCORES_TRG;
/
ALTER TRIGGER "CFG_INDEX_CHOICES_SCORES_TRG" ENABLE;

DROP SEQUENCE CFG_SCORE_CONDITIONS_SEQ;
DROP TABLE CFG_SCORE_CONDITIONS;
CREATE SEQUENCE CFG_SCORE_CONDITIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_SCORE_CONDITIONS (
    SCORE_COND_SID NUMBER,
    CRITERION_SID NUMBER,
    CHOICE_SCORE_SID NUMBER,
    COND_QUESTION_VERSION_SID NUMBER,
    COND_LOV_SID NUMBER,
    CUSTOM_CONDITION VARCHAR2(4000 BYTE),
    AND_CHOICE_SCORE_SID NUMBER,
    OR_CHOICE_SCORE_SID NUMBER,
        CONSTRAINT "CFG_SCORE_CONDITIONS_PK" PRIMARY KEY ("SCORE_COND_SID"),
        CONSTRAINT "CFG_SCORE_CONDITIONS_FK1" FOREIGN KEY ("CRITERION_SID")
            REFERENCES "CFG_INDEX_CRITERIA" ("CRITERION_SID"),
        CONSTRAINT "CFG_SCORE_CONDITIONS_FK2" FOREIGN KEY ("COND_QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID"),
        CONSTRAINT "CFG_SCORE_CONDITIONS_FK3" FOREIGN KEY ("CHOICE_SCORE_SID")
            REFERENCES "CFG_INDEX_CHOICES_SCORES" ("CHOICE_SCORE_SID")
);
CREATE OR REPLACE TRIGGER CFG_SCORE_CONDITIONS_TRG
    BEFORE INSERT
    ON CFG_SCORE_CONDITIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_SCORE_CONDITIONS_SEQ.NEXTVAL INTO :NEW.SCORE_COND_SID FROM dual;
END CFG_SCORE_CONDITIONS_TRG;
/
ALTER TRIGGER "CFG_SCORE_CONDITIONS_TRG" ENABLE;

DROP TABLE CFG_INDICE_CRITERIA_TYPES CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_INDICE_CRITERIA_TYPES_SEQ;
CREATE SEQUENCE CFG_INDICE_CRITERIA_TYPES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_INDICE_CRITERIA_TYPES (
    INDICE_TYPE_SID NUMBER NOT NULL ENABLE,
    INDICE_ID VARCHAR2(500 BYTE),
    MULTI_ENTRY NUMBER,
        CONSTRAINT "CFG_INDICE_CRITERIA_TYPES_PK" PRIMARY KEY ("INDICE_TYPE_SID")
);
CREATE OR REPLACE TRIGGER CFG_INDICE_CRITERIA_TYPES_TRG
    BEFORE INSERT
    ON CFG_INDICE_CRITERIA_TYPES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDICE_CRITERIA_TYPES_SEQ.NEXTVAL INTO :NEW.INDICE_TYPE_SID FROM dual;
END CFG_INDICE_CRITERIA_TYPES_TRG;
/
ALTER TRIGGER "CFG_INDICE_CRITERIA_TYPES_TRG" ENABLE;

DROP TABLE CFG_INDICE_CRITERIA CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_INDICE_CRITERIA_SEQ;
CREATE SEQUENCE CFG_INDICE_CRITERIA_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_INDICE_CRITERIA (
    IND_CRITERION_SID NUMBER,
    INDEX_SID NUMBER,
    INDICE_TYPE_SID NUMBER,
    ACCESSOR VARCHAR2(1000 BYTE),
    CRITERION_VALUE VARCHAR2(4000 BYTE),
    DISPLAY_NAME VARCHAR2(500 BYTE),
    DEP_IND_CRITERION_SID NUMBER,
    ORDER_BY NUMBER,
        CONSTRAINT "CFG_INDICE_CRITERIA_PK" PRIMARY KEY ("IND_CRITERION_SID"),
        CONSTRAINT "CFG_INDICE_CRITERIA_FK1" FOREIGN KEY ("INDEX_SID")
            REFERENCES "CFG_INDEXES" ("INDEX_SID"),
        CONSTRAINT "CFG_INDICE_CRITERIA_FK2" FOREIGN KEY ("INDICE_TYPE_SID")
            REFERENCES "CFG_INDICE_CRITERIA_TYPES" ("INDICE_TYPE_SID")
);
CREATE OR REPLACE TRIGGER CFG_INDICE_CRITERIA_TRG
    BEFORE INSERT
    ON CFG_INDICE_CRITERIA
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDICE_CRITERIA_SEQ.NEXTVAL INTO :NEW.IND_CRITERION_SID FROM dual;
END CFG_INDICE_CRITERIA_TRG;
/
ALTER TRIGGER "CFG_INDICE_CRITERIA_TRG" ENABLE;

DROP SEQUENCE CFG_INDICES_ATTRIBUTES_SEQ;
DROP TABLE CFG_INDICES_ATTRIBUTES CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_INDICES_ATTRIBUTES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_INDICES_ATTRIBUTES(
    INDICE_ATTRIBUTE_SID NUMBER,
    INDEX_SID NUMBER,
    ACCESSOR VARCHAR2(300 BYTE),
    ATTR_ID VARCHAR2(300 BYTE),
        CONSTRAINT "CFG_INDICES_ATTRIBUTES_PK" PRIMARY KEY ("INDICE_ATTRIBUTE_SID"),
        CONSTRAINT "CFG_INDICES_ATTRIBUTES_FK1" FOREIGN KEY ("INDEX_SID")
            REFERENCES "CFG_INDEXES" ("INDEX_SID")
);

CREATE OR REPLACE TRIGGER CFG_INDICES_ATTRIBUTES_TRG
    BEFORE INSERT
    ON CFG_INDICES_ATTRIBUTES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_INDICES_ATTRIBUTES_SEQ.NEXTVAL INTO :NEW.INDICE_ATTRIBUTE_SID FROM dual;
END CFG_INDICES_ATTRIBUTES_TRG;
/
ALTER TRIGGER "CFG_INDICES_ATTRIBUTES_TRG" ENABLE;

DROP TABLE ENTRIES_ADD_CFG CASCADE CONSTRAINTS;
CREATE TABLE ENTRIES_ADD_CFG (
    ENTRY_SID NUMBER NOT NULL,
    APP_ID VARCHAR2(50 BYTE) NOT NULL,
    DESCR VARCHAR2(4000 BYTE),
    IS_MONITORING NUMBER,
    IFI_MAIN_ABRV VARCHAR2(20 BYTE),
    IS_AMBITIOUS NUMBER,
        CONSTRAINT "ENTRIES_ADD_CFG_FK1" FOREIGN KEY ("ENTRY_SID")
            REFERENCES "ENTRIES" ("ENTRY_SID"),
        CONSTRAINT "ENTRIES_ADD_CFG_FK2" FOREIGN KEY ("APP_ID")
            REFERENCES "CFG_QUESTIONNAIRES" ("APP_ID")
);

DROP TABLE CFG_RESPONSE_TYPES CASCADE CONSTRAINTS;
CREATE TABLE CFG_RESPONSE_TYPES (
    CFG_TYPE NUMBER,
    DESCR VARCHAR2(40 BYTE)
);

DROP TABLE CFG_CHOICES_CONDITIONS CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_CHOICES_CONDITIONS_SEQ;
CREATE SEQUENCE CFG_CHOICES_CONDITIONS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_CHOICES_CONDITIONS(
    CHOICE_SID NUMBER,
    LOV_SID NUMBER,
    COND_LOV_SID NUMBER,
        CONSTRAINT "CFG_CHOICES_CONDITIONS_PK" PRIMARY KEY ("CHOICE_SID"),
        CONSTRAINT "CFG_CHOICES_CONDITIONS_FK1" FOREIGN KEY ("LOV_SID")
            REFERENCES "CFG_LOVS" ("LOV_SID"),
        CONSTRAINT "CFG_CHOICES_CONDITIONS_FK2" FOREIGN KEY ("COND_LOV_SID")
            REFERENCES "CFG_LOVS" ("LOV_SID")
);

CREATE OR REPLACE TRIGGER CFG_CHOICES_CONDITIONS_TRG
    BEFORE INSERT
    ON CFG_CHOICES_CONDITIONS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_CHOICES_CONDITIONS_SEQ.NEXTVAL INTO :NEW.CHOICE_SID FROM dual;
END CFG_CHOICES_CONDITIONS_TRG;
/
ALTER TRIGGER "CFG_CHOICES_CONDITIONS_TRG" ENABLE;

DROP TABLE CFG_COMPLIANCE_SOURCES CASCADE CONSTRAINTS;
CREATE TABLE CFG_COMPLIANCE_SOURCES (
    COMPLIANCE_SOURCE_SID NUMBER,
    COMPLIANCE_SOURCE_ID VARCHAR2(100 BYTE),
    YEAR NUMBER,
    DESCR VARCHAR2(500 BYTE),
    APP_SID NUMBER,
    IS_PRIVATE NUMBER,
        CONSTRAINT "CFG_COMPLIANCE_SOURCES_PK" PRIMARY KEY ("COMPLIANCE_SOURCE_SID")
); 

DROP TABLE CFG_COMPLIANCE_REFS CASCADE CONSTRAINTS;
DROP SEQUENCE CFG_COMPLIANCE_REFS_SEQ;
CREATE SEQUENCE CFG_COMPLIANCE_REFS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_COMPLIANCE_REFS (
    COMPLIANCE_REF_SID NUMBER,
    ENTRY_TYPE_SID NUMBER,
    BUDG_AGG_SID NUMBER,
    TARGET_UNIT_SID NUMBER,
    COVERAGE_SID NUMBER,
    PERIOD_SID NUMBER,
    COMPLIANCE_SOURCE_SID NUMBER,
    DESCR VARCHAR2(200 BYTE),
    INDICATOR_SID NUMBER,
    LINE_ID VARCHAR2(200 BYTE),
        CONSTRAINT "CFG_COMPLIANCE_REFS_PK" PRIMARY KEY ("COMPLIANCE_REF_SID"),
        CONSTRAINT "CFG_COMPLIANCE_REFS_FK" FOREIGN KEY ("COMPLIANCE_SOURCE_SID")
            REFERENCES "CFG_COMPLIANCE_SOURCES" ("COMPLIANCE_SOURCE_SID")
);

CREATE OR REPLACE TRIGGER CFG_COMPLIANCE_REFS_TRG
    BEFORE INSERT
    ON CFG_COMPLIANCE_REFS
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_COMPLIANCE_REFS_SEQ.NEXTVAL INTO :NEW.COMPLIANCE_REF_SID FROM dual;
END CFG_COMPLIANCE_REFS_TRG;
/
ALTER TRIGGER "CFG_COMPLIANCE_REFS_TRG" ENABLE;

DROP TABLE CFG_COMPLIANCE_QUESTIONS CASCADE CONSTRAINTS;
CREATE TABLE CFG_COMPLIANCE_QUESTIONS (
    COMPLIANCE_ATTR VARCHAR2(400 BYTE),
    QUESTION_VERSION_SID NUMBER,
        CONSTRAINT "CFG_COMPLIANCE_QUESTIONS_FK" FOREIGN KEY ("QUESTION_VERSION_SID")
            REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID")
);

DROP TABLE CFG_EUROSTAT_COVERAGE CASCADE CONSTRAINTS;
CREATE TABLE CFG_EUROSTAT_COVERAGE(
    COUNTRY_ID VARCHAR2(20 BYTE),
    CG_VALUE NUMBER,
    RG_VALUE NUMBER,
    LG_VALUE NUMBER,
    SS_VALUE NUMBER,
    YEAR NUMBER
);

DROP TABLE CFG_COVERAGE_CONDITIONS CASCADE CONSTRAINTS;
CREATE TABLE CFG_COVERAGE_CONDITIONS(
    QUESTION_VERSION_SID NUMBER,
    NUMERIC_VALUE NUMBER,
    LOV_SID NUMBER,
    NEED_EUROSTAT_CFG NUMBER,
    EUROSTAT_CFG VARCHAR2(100 BYTE),
    DESCR VARCHAR2(2000 BYTE)
);

DROP TABLE INDEX_CALC_STAGES CASCADE CONSTRAINTS;
CREATE TABLE INDEX_CALC_STAGES (
    INDEX_SID NUMBER,
    COUNTRY_ID VARCHAR2(50 BYTE),
    ROUND_SID NUMBER,
    STAGE_SID NUMBER,
    LDAP_LOGIN VARCHAR2(100 BYTE),
    ORGANISATION VARCHAR2(500 BYTE),
    DATETIME DATE,
    ITERATION VARCHAR2(20 BYTE),
        CONSTRAINT "INDEX_CALC_STAGES_FK1" FOREIGN KEY ("INDEX_SID")
            REFERENCES "CFG_INDEXES" ("INDEX_SID")
);

DROP TABLE INDEX_CALC_STAGES_ARCH CASCADE CONSTRAINTS;
CREATE TABLE INDEX_CALC_STAGES_ARCH (
    INDEX_SID NUMBER,
    COUNTRY_ID VARCHAR2(50 BYTE),
    ROUND_SID NUMBER,
    STAGE_SID NUMBER,
    LDAP_LOGIN VARCHAR2(100 BYTE),
    ORGANISATION VARCHAR2(500 BYTE),
    DATETIME DATE,
    ITERATION VARCHAR2(20 BYTE),
        CONSTRAINT "INDEX_CALC_STAGES_ARCH_FK1" FOREIGN KEY ("INDEX_SID")
            REFERENCES "CFG_INDEXES" ("INDEX_SID")
);

DROP TABLE ROUNDS_MIG;
CREATE TABLE ROUNDS_MIG (
    OLD_ROUND_SID NUMBER,
    NEW_ROUND_SID NUMBER,
    YEAR NUMBER
);

DROP SEQUENCE CFG_VINTAGE_ATTR_TYPES_SEQ;
DROP TABLE CFG_VINTAGE_ATTR_TYPES CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_VINTAGE_ATTR_TYPES_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_VINTAGE_ATTR_TYPES (
    ATTR_TYPE_SID NUMBER,
    ATTR_ID VARCHAR2(500 BYTE),
    DB_ONLY NUMBER,
    ASSESSMENT_PERIOD NUMBER,
    ACCESSOR VARCHAR2(1000 BYTE),
        CONSTRAINT "CFG_VINTAGE_ATTR_TYPES_PK" PRIMARY KEY ("ATTR_TYPE_SID")
);
CREATE OR REPLACE TRIGGER CFG_VINTAGE_ATTR_TYPES_TRG
    BEFORE INSERT
    ON CFG_VINTAGE_ATTR_TYPES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_VINTAGE_ATTR_TYPES_SEQ.NEXTVAL INTO :NEW.ATTR_TYPE_SID FROM dual;
END CFG_VINTAGE_ATTR_TYPES_TRG;
/
ALTER TRIGGER "CFG_VINTAGE_ATTR_TYPES_TRG" ENABLE;
/
DROP SEQUENCE CFG_VINTAGE_ATTRS_SEQ;
DROP TABLE CFG_VINTAGE_ATTRIBUTES CASCADE CONSTRAINTS;
CREATE SEQUENCE CFG_VINTAGE_ATTRS_SEQ START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE TABLE CFG_VINTAGE_ATTRIBUTES(
    VINTAGE_ATTR_SID NUMBER,
    APP_ID VARCHAR2(50 BYTE),
    ATTR_TYPE_SID NUMBER,
    ATTR_VALUE VARCHAR2(500 BYTE),
    DISPLAY_NAME VARCHAR2(1000 BYTE),
    DISPLAY_PREFIX VARCHAR2(500 BYTE),
    DEFAULT_SELECTED NUMBER,
    ORDER_BY NUMBER,
    PREV_YEAR NUMBER,
    IS_FILTER NUMBER,
        CONSTRAINT "CFG_VINTAGE_ATTRIBUTES_PK" PRIMARY KEY ("VINTAGE_ATTR_SID"),
        CONSTRAINT "CFG_VINTAGE_ATTRIBUTES_FK1" FOREIGN KEY ("ATTR_TYPE_SID")
            REFERENCES "CFG_VINTAGE_ATTR_TYPES" ("ATTR_TYPE_SID")
);

CREATE OR REPLACE TRIGGER CFG_VINTAGE_ATTRIBUTES_TRG
    BEFORE INSERT
    ON CFG_VINTAGE_ATTRIBUTES
    FOR EACH ROW
    DECLARE
    BEGIN
       SELECT CFG_VINTAGE_ATTRS_SEQ.NEXTVAL INTO :NEW.VINTAGE_ATTR_SID FROM dual;
END CFG_VINTAGE_ATTRIBUTES_TRG;
/
ALTER TRIGGER "CFG_VINTAGE_ATTRIBUTES_TRG" ENABLE;
/

--ENTRY_CHOICES_ARCH

DROP TABLE ENTRY_CHOICES_ARCH CASCADE CONSTRAINTS;
CREATE TABLE ENTRY_CHOICES_ARCH(
ROUND_SID NUMBER(9),
ENTRY_SID NUMBER(9) NOT NULL ENABLE,
QUESTION_VERSION_SID NUMBER(9) NOT NULL ENABLE,
RESPONSE VARCHAR2(4000 BYTE),
DETAILS VARCHAR2(4000 BYTE),
ASSESSMENT_PERIOD NUMBER(1),
    CONSTRAINT "ENTRY_CHOICES_ARCH_FK1" FOREIGN KEY ("ENTRY_SID")
        REFERENCES "ENTRIES" ("ENTRY_SID") ENABLE,
    CONSTRAINT "ENTRY_CHOICES_ARCH_FK2" FOREIGN KEY ("QUESTION_VERSION_SID")
        REFERENCES "CFG_QUESTION_VERSIONS" ("QUESTION_VERSION_SID")
);

CREATE TABLE CFG_DETAILS(
DETAILS_SID NUMBER,
DETAIL_ID VARCHAR2(300 BYTE)
);

INSERT INTO CFG_DETAILS VALUES (1, 'Mandatory please specify box');
INSERT INTO CFG_DETAILS VALUES (2, 'Additional info on one of the IFIs');
INSERT INTO CFG_DETAILS VALUES (3, 'Additional info on the other one of the IFIs');
INSERT INTO CFG_DETAILS VALUES (4, 'Non-mandatory please specify box');
COMMIT;