#-------------------------------------------------------------------------------------------------
# Import forecast archive from excel file generated by FDMS+
# -----------------------------
# parametres : argv[] - first 3 parameters are mandatory
# sys.argv[1] = round sid for which to load the data
# sys.argv[2] = a/q - annual/quarterly data selection
# sys.argv[3] = path to the input data file
# sys.argv[4] = data provider, 'PRE_PROD' by default
#-------------------------------------------------------------------------------------------------
import sys
from pandas import isna, read_excel
from typing import Dict, List, Set, Tuple
from scriptlib.db_service import DbService

#
# Input params
# --------------------------------------------------------------------
if len(sys.argv) < 4:
    print('usage:', __file__, '<round sid> <[a]nnual/[q]uarterly> <input data file> [provider]')
    sys.exit()
else:
    round_sid = int(sys.argv[1])
    data_frequency = sys.argv[2].upper()
    input_file = sys.argv[3]
    provider = sys.argv[4].upper() if len(sys.argv) > 4 else 'PRE_PROD'

if data_frequency not in 'AQ':
    print('Invalid data frequency')

#
# Main routine
# --------------------------------------------------------------------
db = DbService()

year, period = db.get_round_info(round_sid)
if year == None:
    print('Invalid round number! Exiting.')
    sys.exit(1)

print(f'Reading input file {input_file}...', end = ' ', flush = True)
excel_df = read_excel(input_file)
print('File loaded.')
excel_df = excel_df.iloc[:,[0,4,8] + list(range(9, excel_df.shape[1]))]
start_year = int(list(excel_df.columns)[3][:4])

frequency = 'annual' if data_frequency == 'A' else 'quarterly'
answer = input(f'You are about to load {frequency} forecast for {period} {year} with provider {provider}. Please confirm [y/n]: ')
if answer.lower() != 'y':
    sys.exit(0)

db.clean_indicator_data(round_sid, provider, data_frequency)
invalid_countries: Set[str] = set()
invalid_scales: Set[str] = set()
failed: List[Tuple[Dict, int]] = list()

storage_sid = db.get_storage_sid('FINAL')
rows = excel_df.values
count = 0
for country, indicator, scale, *data in rows:
    country_id = db.get_country_id(country.strip())
    if country_id == None:
        invalid_countries.add(country)
        continue
    # scale_exponent = db.get_scale_exponent(scale[:-1].upper())
    # if scale_exponent == None:
    #     invalid_scales.add(scale)
    #     continue
    # time_serie = ','.join(['' if isna(d) else str(d * (10 ** scale_exponent)) for d in data])
    time_serie = ','.join(['' if isna(d) else str(d) for d in data])
    indicator_data = {
        'app_id': 'FDMS',
        'country_id': country_id,
        'indicator_id': indicator,
        'provider_id': provider,
        'periodicity_id': data_frequency,
        'scale_id': 'UNIT',
        'start_year': start_year,
        'time_serie': time_serie,
        'round_sid': round_sid,
        'storage_sid': storage_sid,
        'p_archive_data': 1,
    }
    res = db.set_indicator_data(indicator_data)
    if res <= 0 and indicator != 'ICI':
        failed.append((indicator_data, res))
        continue

    count += 1
    if count % 100 == 0:
        print('.', end = '', flush = True)

db.commit()
print(' Done.')
if len(invalid_countries): print('Invalid countries:', invalid_countries)
if len(invalid_scales): print('Invalid scales:', invalid_scales)
if len(failed):
    # print('Failed updates:', failed)
    print('Failed indicators:', sorted(set((d['indicator_id'] for (d, res) in failed))))
print(f'{count} records have been inserted, {len(failed)} records have failed.')
