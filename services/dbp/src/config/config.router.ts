import { NextFunction, Request, Response, Router } from 'express'

import { FDConfigRouter } from '../../../lib/dist/measure/fisc-drm/config/fd-config.router'

import { ConfigController } from './config.controller'
import { SharedService } from '../shared/shared.service'

export class ConfigRouter extends FDConfigRouter<SharedService, ConfigController> {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Static Members /////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method createRouter factory function to create an instance of this Router
     *********************************************************************************************/
    public static createRouter(sharedService: SharedService): Router {
        return new ConfigRouter(sharedService).buildRouter()
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Instance Members ///////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Constructor ////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    constructor(sharedService: SharedService) {
        super(sharedService, new ConfigController(sharedService))
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Protected Methods //////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method configRoutes routes configuration for this Router
     * @overrides
     *********************************************************************************************/
    protected configRoutes(router: Router): Router {
        router.get('/sources', this.getSourcesHandler.bind(this))

        return super.configRoutes(router)
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Private Methods ////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method getSourcesHandler
     *********************************************************************************************/
    private getSourcesHandler(req: Request, res: Response, next: NextFunction) {
        this.sharedService.getDbpSources().then(res.json.bind(res), next)
    }
}
