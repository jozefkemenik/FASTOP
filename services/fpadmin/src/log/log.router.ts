import { NextFunction, Request, Response, Router } from 'express'

import { AuthzLibService, BaseRouter } from '../../../lib/dist'
import { EApps } from 'config'
import { LogController } from './log.controller'
import { LogService } from './log.service'


export class LogRouter extends BaseRouter {

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Static Members /////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method createRouter factory function to create an instance of StatsRouter
     *********************************************************************************************/
    public static createRouter(appId: EApps): Router {
        return new LogRouter(appId).buildRouter()
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Instance Members ///////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    private controller: LogController

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Constructor ////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    constructor(appId: EApps) {
        super(appId)
        this.controller = new LogController(new LogService())
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Protected Methods //////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method configRoutes routes configuration for LogRouter
     *********************************************************************************************/
    protected configRoutes(router: Router): Router {
        return router
            .get('/access',
                AuthzLibService.checkAuthorisation('ADMIN'),
                this.getAccessLogsHandler)
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Private Methods ////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method getAccessLogsHandler
     *********************************************************************************************/
    private getAccessLogsHandler = (req: Request, res: Response, next: NextFunction)  =>
        this.controller.getAccessLogs().then(res.json.bind(res), next)

}
