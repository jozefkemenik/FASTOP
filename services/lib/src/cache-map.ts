export class CacheMap<K, V> extends Map<K, V> {

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Constructor ////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    constructor(private cacheSize = 100, private cacheClearOldest = 10) {
        super()
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Public Methods /////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method set
     *********************************************************************************************/
    public set(key: K, value: V): this {
        if (this.size >= this.cacheSize) this.clearOldest()
        return super.set(key, value)
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Private Methods ////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method clearOldest
     *********************************************************************************************/
    private clearOldest(): void {
        let toBeCleared = this.cacheClearOldest
        for (const key of this.keys()) {
            this.delete(key)
            if (--toBeCleared <= 0) break
        }
    }
}
