import { Request, Response, Router } from 'express'

import { Level, LoggingService } from './logging.service'
import { BaseRouter } from './base-router'
import { ErrorService } from './error.service'
import { config } from '../../config/config'

export class RemoteLoggerRouter extends BaseRouter {

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Static Members /////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method createRouter factory function to create an instance of RemoteLoggerRouter
     *********************************************************************************************/
    public static createRouter(logs: LoggingService): Router {
        return new RemoteLoggerRouter(logs).buildRouter()
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Instance Members ///////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Constructor ////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    constructor(private _logs: LoggingService) {
        super()
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Protected Methods //////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////

    /**********************************************************************************************
     * @method configRoutes
     *********************************************************************************************/
    protected configRoutes(router: Router): Router {
        return router.post('/', (req: Request, res: Response) => {
            const message = `Client${ErrorService.getErrorUser(req)} reported error: ${JSON.stringify(req.body)}`
            this._logs.log(message, Level.ERROR)

            if (config.mailNotifications) {
                ErrorService.errorMailNotification(this._logs.appId, message)
                    .catch(() => this._logs.log('Sending an error email has failed!', Level.ERROR))
            }
            res.status(200).end()
        })
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////// Private Methods ////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
}
